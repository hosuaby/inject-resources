import org.gradle.api.attributes.java.TargetJvmVersion

plugins {
    id 'base'
    id 'java'
    id 'maven-publish'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.12.2'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

allprojects {
    group 'io.hosuaby'
    version '1.0.0-SNAPSHOT'

    repositories {
        mavenCentral()
        mavenLocal()
    }

    apply plugin: 'java'
    apply plugin: 'jacoco'

    ext {
        INTEGRATION_TESTS = System.getProperty('INTEGRATION_TESTS')

        JUNIT_VERSION = System.getProperty('JUNIT_VERSION') ?: '5.11.0-RC1'
        JACKSON_VERSION = System.getProperty('JACKSON_VERSION') ?: '2.17.2'
        GSON_VERSION = System.getProperty('GSON_VERSION') ?: '2.11.0'
        SNAKE_YAML_VERSION = System.getProperty('SNAKE_YAML_VERSION') ?: '2.2'
        SPRING_VERSION = System.getProperty('SPRING_VERSION') ?: '2.7.18'

        SIGNING_KEY = System.getenv('SIGNING_KEY')
    }
}

configure(subprojects.findAll { !it.path.contains(':inject-resources-junit-vintage') }) {
    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

def coveredProjectsPaths = [
        ':inject-resources-core',
        ':inject-resources-commons',
        ':inject-resources-spring',
        ':inject-resources-spring:tests-general',
        ':inject-resources-spring:tests-with-jackson',
        ':inject-resources-spring:tests-with-gson',
        ':inject-resources-junit-jupiter',
        ':inject-resources-junit-jupiter:tests-general',
        ':inject-resources-junit-jupiter:tests-with-jackson',
        ':inject-resources-junit-jupiter:tests-with-gson',
        ':inject-resources-junit-vintage',
        ':inject-resources-junit-vintage:tests-general'
]

def coveredProjects = subprojects.findAll { subproject ->
    coveredProjectsPaths.contains(subproject.path)
}

configure(coveredProjects) {
    def javaVersion = JavaVersion.VERSION_1_8
    Integer javaMajorVersion = Integer.parseInt(javaVersion.getMajorVersion())

    compileJava {
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
    }

    compileTestJava {
        sourceCompatibility = JavaVersion.VERSION_11
    }

    configurations {
        runtimeElements {
            attributes {
                attribute TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, javaMajorVersion
            }
        }
        apiElements {
            attributes {
                attribute TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, javaMajorVersion
            }
        }
    }

    jacocoTestReport {
        reports {
            xml.required = true
            html.required = true
        }
    }
}

def integrationTestsProjectsPaths = [
        ':inject-resources-spring:tests-general',
        ':inject-resources-spring:tests-with-jackson',
        ':inject-resources-spring:tests-with-gson',
        ':inject-resources-junit-jupiter:tests-general',
        ':inject-resources-junit-jupiter:tests-with-jackson',
        ':inject-resources-junit-jupiter:tests-with-gson',
        ':inject-resources-junit-vintage:tests-general'
]

def integrationTestsProjects = subprojects.findAll { subproject ->
    integrationTestsProjectsPaths.contains(subproject.path)
}

configure(integrationTestsProjects) {
    compileTestJava {
        onlyIf { INTEGRATION_TESTS }
    }

    test {
        onlyIf { INTEGRATION_TESTS }
    }
}

def publishedProjectsPaths = [
        ':inject-resources-core',
        ':inject-resources-spring',
        ':inject-resources-junit-jupiter',
        ':inject-resources-junit-vintage'
]

def publishedProjects = subprojects.findAll { subproject ->
    publishedProjectsPaths.contains(subproject.path)
}

configure(publishedProjects) {
    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn coveredProjects.jacocoTestReport
    mustRunAfter ':test-commons:test'

    additionalSourceDirs.from = files(coveredProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(coveredProjects.sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(coveredProjects.sourceSets.main.output)
    executionData.from = files(subprojects.jacocoTestReport.executionData)

    reports {
        html.required = true
        xml.required = true
    }
}

coveralls {
    sourceDirs = coveredProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

asciidoctor {
    sourceDir project.rootDir
    attributes 'project-version': project.version
    outputDir "docs/${project.version}/asciidoc"
}
